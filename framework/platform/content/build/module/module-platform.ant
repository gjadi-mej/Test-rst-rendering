<!--
	ANT

	Copyright 2020 MicroEJ Corp. All rights reserved.
	Use of this source code is governed by a BSD-style license that can be found with this software.
	
-->
<project name="module-platform" xmlns:ea="antlib:org.apache.easyant" xmlns:mam="antlib:com.is2t.mam.ant" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!--
		This script builds the platform into current workspace.
	-->
	
	<fail unless="eclipse.home" message="Set the MicroEJ SDK directory path in the `eclipse.home` property (If you are using easyant-build-component framework the full name of the property is `easyant.inject.eclipse.home`)."/>
	
	<property name="eclipse-antRunner.build.target" value="jpf:build"/>
	<property name="eclipse-antRunner.eclipse.home" location="${eclipse.home}"/>
	<property name="eclipse-antRunner.build.script" location="${module.dir}/build/module/module-platform/build.ant"/>

	<!-- Check if the MicroEJ Architecture is available --> 
	<target name="platform:architecture:check" >

		<fail unless="dependencies.output.dir"/>
		<!-- By default the MicroEJ Architecture is loaded from the ivy dependencies. --> 
		<property name="microej.architecture.dir" location="${dependencies.output.dir}"/>
		
		<fail message="
			No MicroEJ Architecture found in ${microej.architecture.dir} directory.${line.separator}
			You can reference the MicroEJ Architecture:${line.separator}
			- by adding a dependency in your Ivy file and so retrieve it using Ivy,${line.separator}
			- or by setting the `microej.architecture.dir` property with the path to the directory that contains the pre-loaded MicroEJ Architecture.${line.separator}
			(If you are using easyant-build-component framework	the full name of the property is `easyant.inject.microej.architecture.dir`.)
			">
			<condition>
				<resourcecount when="equal" count="0">
					<fileset dir="${microej.architecture.dir}" includes="*.xpf*" erroronmissingdir="false"/>
				</resourcecount>
			</condition>
		</fail>
	</target>
	
	<!-- Build the platform -->
	<target name="platform:build" extensionOf="abstract-compile:compile" depends="-eclipse-antRunner:init,platform:architecture:check">
		<runEclipseAntRunner>
			<args.properties>
				<jvmarg value="-Dmicroej.repository=${target}/microejRepository"/>
				<arg value="-Djpf.configuration.file=${module.dir}/${platform.filename}"/>
				<arg value="-Dmicroej.architecture.dir=${microej.architecture.dir}"/>
				<arg value="-Dant.file.com.is2t.easyant.plugins;eclipse-antRunner=${ant.file.com.is2t.easyant.plugins;eclipse-antRunner}"/>
				<arg value="-Dplatform.project.name=${platform.project.name}"/>
				<arg value="-Dscripts.dir=${target}/scripts"/>
			</args.properties>
		</runEclipseAntRunner>
	</target>
	
	<!-- Copy the platform in target output dir -->
	<target name="platform:copy" extensionOf="abstract-compile:compile" depends="platform:build" unless="skip.publish-local">
		<property name="platform.publish.dir" location="${target}/platform"/>
		<copy todir="${platform.publish.dir}/${platform.project.name}">
			<fileset dir="${platform.project.dir}" includes="**/*"/>
		</copy>
	</target>

</project>
