<!--
	ANT

	Copyright 2020-2023 MicroEJ Corp. All rights reserved.
	Use of this source code is governed by a BSD-style license that can be found with this software.
	
-->
<project name="module-group" xmlns:ea="antlib:org.apache.easyant" xmlns:mam="antlib:com.is2t.mam.ant" xmlns:ivy="antlib:org.apache.ivy.ant">

	<!--
		This script adds or removes some groups from platform configuration file.
		
		Set the property "com.microej.module.{group name}.enabled" to "true" or "false" to add or remove
		a group. Do not set this property to let platform file option as is.
	-->

	<!-- Global properties -->
	<dirname file="${ant.file.module-group}" property="module-group.dir"/>
	
	<!-- Enable or disable group "multi" -->
	<target name="module-group:multi" depends="module-group:multi-check" extensionOf="abstract-compile:compile-ready" if="${architecture.multi.module.to.update}">
		<module-group-update name="kf" enable="${com.microej.platformbuilder.module.multi.enabled}"/>
	</target>
	
	<!-- 
		Checks if the "Multi Applications" module is available in the MicroEJ Architecture and if the PCA property 'com.microej.platformbuilder.module.multi.enabled' is set.
		Starting from version 8.1.0, the "Multi Applications" module has been removed and replaced with the Architecture property 'com.microej.runtime.capability'.
		The PCA property 'com.microej.platformbuilder.module.multi.enabled' takes precedence to the Architecture property 'com.microej.runtime.capability'.
		 
		Set the property "architecture.multi.module.to.update".
	-->
	<target name="module-group:multi-check">
		
		<!--
			To keep the VEE Ports made for the new Architectures (>=8.1) compatible with the old Architectures (<=8.0),
			initialize the old property 'com.microej.platformbuilder.module.multi.enabled' to:
			- 'true' when capability is 'multi'
			- 'false' when capability is 'mono' or 'tiny'
			- nothing (not set) when capability is not set (this will prevent a modification of the .platform file).
		-->
		<condition property="com.microej.platformbuilder.module.multi.enabled" value="true">
			<equals arg1="${com.microej.runtime.capability}" arg2="multi"/>
		</condition>
		<condition property="com.microej.platformbuilder.module.multi.enabled" value="false">
			<or>
				<equals arg1="${com.microej.runtime.capability}" arg2="mono"/>
				<equals arg1="${com.microej.runtime.capability}" arg2="tiny"/>
			</or>
		</condition>
		
		<!--
			Update the .platform file to set or unset the KF checkbox only if the "Multi Applications" module is available
			in the Architecture (<=8.0) and the 'com.microej.platformbuilder.module.multi.enabled' property is set.  			 
		-->
		<condition property="architecture.multi.module.to.update" value="true" else="false">
			<and>
				<resourceexists>
					<url url="jar:file:${microej.architecture.file}!/build/groups/kf/kf.group"/>
				</resourceexists>
				<isset property="com.microej.platformbuilder.module.multi.enabled"/>
			</and>
		</condition>
		
		<!--
			Initialize the Architecture property 'com.microej.runtime.capability' (if not explicitely set) to:
			- 'multi' when 'com.microej.platformbuilder.module.multi.enabled' is set to 'true'.
			- 'mono' when 'com.microej.platformbuilder.module.multi.enabled' is set to 'false'.
		-->
		<condition property="com.microej.runtime.capability" value="multi">
			<istrue value="${com.microej.platformbuilder.module.multi.enabled}"/>
		</condition>
		<condition property="com.microej.runtime.capability" value="mono">
			<and>
				<isset property="com.microej.platformbuilder.module.multi.enabled"/>
				<isfalse value="${com.microej.platformbuilder.module.multi.enabled}"/>
			</and>
		</condition>
	</target>
	
	<!-- Update '.platform' file to add or remove a group-->
	<macrodef name="module-group-update">
		<attribute name="name"/>
		<attribute name="enable" default="${com.microej.platformbuilder.module.@{name}.enabled}" description="true | false"/>
		<attribute name="platform.filename" default="${com.microej.platformbuilder.platform.filename}"/>
		<sequential>
			<echo message="module-group-update[@{operation}@{name}]"/>
			
			<local name="operation.file"/>
			<condition property="operation.file" value="${module-group.dir}/module-group/addGroup.xsl" else="${module-group.dir}/module-group/removeGroup.xsl">
				<istrue value="@{enable}"/>
			</condition>
			
			<!-- process XSL and generate ouput project  -->
			<!-- XSLT MUST NOT process the same file in input and output => perform a copy -->
			<local name="operation.file.tmp"/>
			<tempfile property="operation.file.tmp" destdir="${java.io.tmpdir}"/>
			<copy file="${operation.file}" tofile="${operation.file.tmp}">
				<filterset begintoken="%" endtoken="%">
					<filter token="GROUP_NAME" value="@{name}"/>
				</filterset>
			</copy>
			<local name="platform.filename.tmp"/>
			<tempfile property="platform.filename.tmp" destdir="${java.io.tmpdir}"/>
			<xslt 
				style="${operation.file.tmp}"
			    in="@{platform.filename}"
				out="${platform.filename.tmp}"
				force="true"
			/>
			<!-- XLST generates a useless empty line that makes a useless change in the VCS => remove it -->
			<replace file="${platform.filename.tmp}" token="${line.separator}${line.separator}" value="${line.separator}"/>
			<copy file="${platform.filename.tmp}" tofile="@{platform.filename}" overwrite="true"/>
			<echo message="module-group-update[@{name}]"/>
			<concat>
				<fileset file="@{platform.filename}"/>
			</concat>

			<delete file="${operation.file.tmp}"/>
			<delete file="${platform.filename.tmp}"/>
		</sequential>
	</macrodef>
	
	
</project>
