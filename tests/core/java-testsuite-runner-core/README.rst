MicroEJ Core Validation
=======================

Overview
--------

This project contains test cases aimed at validating the correct runtime execution 
of a MicroEJ Platform connected to a Board Support Package (BSP).
 
Tests are written as JUnit test cases, thus the main entry point is automatically generated by MicroEJ SDK.

Requirements
------------

-  MicroEJ SDK version ``5.1.0`` (included in MicroEJ SDK dist. ``19.05``).
-  MicroEJ Platform built from a MicroEJ Architecture version ``7.0.0`` or higher.

Usage
-----

In MicroEJ SDK,

-  Select ``Run > Run Configurations...``. A launcher named
   ``java-testsuite-runner-core`` should be available under
   ``MicroEJ Application``.
   
-  In ``Execution`` tab, select the target MicroEJ Platform.

-  Click on ``Run`` button to compile the MicroEJ Application.

-  Before linking the application against the MicroEJ Platform, add the
   following code in your BSP to test the FPU configuration:

.. code:: c

   #include "sni.h"
   jfloat Java_com_microej_core_tests_MicroejCoreValidation_testFloat (jfloat a, jfloat b) {return a * b;}
   jdouble Java_com_microej_core_tests_MicroejCoreValidation_testDouble (jdouble a, jdouble b) {return a * b;}

-  For a best result in the Java Round Robin test, disable all the C
   native tasks except the MicroEJ task.

-  Link the BSP project with the MicroEJ Application (``microejapp.o``), 
   the MicroEJ Platform runtime (``microejruntime.a``) and the MicroEJ Platform header files (``*.h``).

-  Once all the tests have passed successfully, MicroEJ Core is validated.

-  See below for an output example of a successful validation.

::

   VM START
   *****************************************************************************************************
   *                                  MicroEJ Core Validation - 3.0.0                                  *
   *****************************************************************************************************
   * Copyright 2013-2022 MicroEJ Corp. All rights reserved.                                            *
   * Use of this source code is governed by a BSD-style license that can be found with this software.  *
   *****************************************************************************************************
   
   -> Check visible clock (LLMJVM_IMPL_getCurrentTime validation)...
   Property 'com.microej.core.tests.clock.seconds' is not set (default to '10' seconds)
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   OK: testVisibleClock
   -> Check schedule request and wakeup (LLMJVM_IMPL_scheduleRequest and LLMJVM_IMPL_wakeupVM validation)...
   Waiting for 5s...
   ...done
   OK: testTime
   -> Check monotonic time (LLMJVM_IMPL_getCurrentTime, LLMJVM_IMPL_setApplicationTime validation)...
   Waiting for 5s...
   ...done
   OK: testMonotonicTime
   -> Check Java round robin (LLMJVM_IMPL_scheduleRequest validation)...
   For a best result, please disable all the C native tasks except the MicroEJ task.
   Task 3 is waiting for start...
   Task 2 is waiting for start...
   Task 1 is waiting for start...
   Task 0 is waiting for start...
   Starting tasks and wait for 10 seconds...
   Task 2 ends.
   Task 3 ends.
   Task 0 ends.
   Task 1 ends.
   ...done.
   OK: testJavaRoundRobin
   -> Check isInReadOnlyMemory (LLBSP_IMPL_isInReadOnlyMemory validation)...
   Test synchronize on literal string
   Test synchronize on class
   Test multiple synchronize
   OK: testIsInReadOnlyMemory
   -> Check FPU (soft/hard FP option)...
   OK: testFPU
   PASSED: 6
   VM END (exit code = 0)

Dependencies
------------

*All dependencies are retrieved transitively by MicroEJ Module Manager*.

Troubleshooting
---------------

The test suite blocks during the Java round robin test under FreeRTOS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Issue: 

- The test of ``LLMJVM_IMPL_scheduleRequest`` blocks at the following
  step: ``Starting tasks and wait for 10 seconds...``.

Solution: 

- Ensure the JVM native C task has a priority lower than the FreeRTOS
  timer task defined in ``FreeRTOSConfig.h`` (``configTIMER_TASK_PRIORITY``).

Source
------

N/A

Restrictions
------------

None.

Platform Test Suite
===================

This project is also a ready-to-use project for testing `MicroEJ Core <https://docs.microej.com/en/latest/PlatformDeveloperGuide/coreEngine.html#implementation>`_ implementations on a device.

Prerequisites
-------------

Consult `main Readme <../../README.rst>`_.

Configuration
-------------

- In MicroEJ SDK, import the ``java-testsuite-runner-core`` project in your workspace.
- Create the local ``config.properties`` file. Copy the ``config.properties.tpl`` to ``config.properties``.
- Open the ``config.properties`` file.
- Fill the options marked as ``[required]``, particularly:

  - Target Platform: set ``target.platform.dir`` to the absolute path of the Platform being tested (the parent folder of the ``release.properties`` file and the platform sources, see `Setup a Platform for Tests <https://docs.microej.com/en/latest/ApplicationDeveloperGuide/testsuite.html#setup-a-platform-for-tests>`__),
  - `BSP Connection <https://docs.microej.com/en/latest/PlatformDeveloperGuide/platformCreation.html#bsp-connection>`_: check the Platform specific documentation to get the kind of configured BSP connection.
  - Trace Redirection (if the Platform requires output traces redirection): set options in sync with the Serial to Socket Transmitter options.

- Check `Application Options <https://docs.microej.com/en/latest/ApplicationDeveloperGuide/applicationOptions.html>`_ declared in ``validation/microej-testsuite-common.properties``. 
  By default, options are initialized with suitable values to successfully execute the whole test suite and should not be changed. 
  However in some particular cases, you can adjust test suite specific options or memory settings.

Execution
---------

Right-click on the ``java-testsuite-runner-core`` project and click on ``Build Module``.

Please refer to `Platform Qualification documentation <https://docs.microej.com/en/latest/PlatformDeveloperGuide/platformQualification.html>`_ to know more about test suites and how to get reports.

Troubleshooting
---------------

Consult `main Readme <../../README.rst>`_.

..
    Copyright 2020-2022 MicroEJ Corp. All rights reserved.
    Use of this source code is governed by a BSD-style license that can be found with this software.
