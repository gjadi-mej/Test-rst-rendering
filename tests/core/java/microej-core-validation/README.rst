MicroEJ Core Validation
=======================

Overview
--------

This project contains test cases aimed at validating the correct runtime execution 
of a MicroEJ Platform connected to a Board Support Package (BSP).
 
Tests are written as JUnit test cases, thus the main entry point is automatically generated by MicroEJ SDK.

Requirements
------------

-  MicroEJ SDK version ``5.1.0`` (included in MicroEJ SDK dist. ``19.05``).
-  MicroEJ Platform built from a MicroEJ Architecture version ``7.0.0`` or higher.

Usage
-----

In MicroEJ SDK,

-  Select ``Run > Run Configurations...``. A launcher named
   ``microej-core-validation`` should be available under
   ``MicroEJ Application``.
   
-  In ``Execution`` tab, select the target MicroEJ Platform.

-  Click on ``Run`` button to compile the MicroEJ Application.

-  Before linking the application against the MicroEJ Platform, add the
   following code in your BSP to test the FPU configuration:

.. code:: c

   #include "sni.h"
   jfloat Java_com_microej_core_tests_MicroejCoreValidation_testFloat (jfloat a, jfloat b) {return a * b;}
   jdouble Java_com_microej_core_tests_MicroejCoreValidation_testDouble (jdouble a, jdouble b) {return a * b;}

-  For a best result in the Java Round Robin test, disable all the C
   native tasks except the MicroEJ task.

-  Link the BSP project with the MicroEJ Application (``microejapp.o``), 
   the MicroEJ Platform runtime (``microejruntime.a``) and the MicroEJ Platform header files (``*.h``).

-  Once all the tests have passed successfully, MicroEJ Core is validated.

-  See below for an output example of a successful validation.

::

   VM START
   *****************************************************************************************************
   *                                  MicroEJ Core Validation - 3.0.0                                  *
   *****************************************************************************************************
   * Copyright 2013-2020 MicroEJ Corp. All rights reserved.                                            *
   * This library is provided in source code for use, modification and test, subject to license terms. *
   * Any modification of the source code will break MicroEJ Corp. warranties on the whole library.     *
   *****************************************************************************************************
   
   -> Check visible clock (LLMJVM_IMPL_getCurrentTime validation)...
   Property 'com.microej.core.tests.clock.seconds' is not set (default to '10' seconds)
   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   OK: testVisibleClock
   -> Check schedule request and wakeup (LLMJVM_IMPL_scheduleRequest and LLMJVM_IMPL_wakeupVM validation)...
   Waiting for 5s...
   ...done
   OK: testTime
   -> Check monotonic time (LLMJVM_IMPL_getCurrentTime, LLMJVM_IMPL_setApplicationTime validation)...
   Waiting for 5s...
   ...done
   OK: testMonotonicTime
   -> Check Java round robin (LLMJVM_IMPL_scheduleRequest validation)...
   For a best result, please disable all the C native tasks except the MicroEJ task.
   Task 3 is waiting for start...
   Task 2 is waiting for start...
   Task 1 is waiting for start...
   Task 0 is waiting for start...
   Starting tasks and wait for 10 seconds...
   Task 2 ends.
   Task 3 ends.
   Task 0 ends.
   Task 1 ends.
   ...done.
   OK: testJavaRoundRobin
   -> Check isInReadOnlyMemory (LLBSP_IMPL_isInReadOnlyMemory validation)...
   Test synchronize on literal string
   Test synchronize on class
   Test multiple synchronize
   OK: testIsInReadOnlyMemory
   -> Check FPU (soft/hard FP option)...
   OK: testFPU
   PASSED: 6
   VM END (exit code = 0)

Dependencies
------------

*All dependencies are retrieved transitively by MicroEJ Module Manager*.

Source
------

N/A

Restrictions
------------

None.

..
    Copyright 2020 MicroEJ Corp. All rights reserved.
    This library is provided in source code for use, modification and test, subject to license terms.
    Any modification of the source code will break MicroEJ Corp. warranties on the whole library.
